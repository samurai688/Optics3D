10/27/2019

    going through and refactoring on new laptop with pycharm, converting tests to pytest
    various things need plt.show() in pycharm
    I expanded the ray-sphere intersections to be more complete, may cause issues
    the whole structure is still taking shape and probably in need of some refactors
    czerny and test still work at least

    have done (pytestifying):
      sphere intersect
      rectangle intersect
      project onto plane

    still need to do (pytestifying):
      concave mirror
      axis angle rot
      angle between

    moved a copy of general.py over cause pycharm wasn't seeing it and added some stuff, should do something about that
    one thing i added to general.py was a nice bounding box equal axis thing
    need to implement source control



10/28/2019

    finished pytestifying, without going super deep on making new and exhaustive tests
    cool
    nice, we've got github integration working
    adding the bounding box equal thing everywhere



11/03/2019

    how do we even start eating this elephant
    I guess I need to read through the code so far and try to figure out where it is currently
    okay I think we have most of the vector rules for the ray tracing, if we could define the optic objects
    if we could define objects properly and have the light be able to figure out what to do on hitting them
    that's the main issue now
    so
    let's go read some about CAD software and the boolean model of building objects, or whatever
    "constructive solid geometry"
    represent stuff as a "BSP tree" -- this seems mostly for solving performance issues in games with complex scenes
    let's just plan to use whatever representation is easy to understand and use
    there is a pycsg library, but it uses polygons, which I'd rather stay away from for now
    so what we want is, some sort of tree, with primitives and booleans on those primitives, that you can ray trace
    so I need to understand more about what that will look like
    primitives: = leaf nodes of tree
        sphere, cube, cylinder, conde
    boolean operators: = intermediate nodes of tree
        union, intersection, difference

    ray into union:
        ray hits at first intersection.
        example:
            min(tA_min, tB_min)
    ray into intersection:
        ray hits at first time in A and in B.
        example:
            If ((tA_min < tB_min ) and (tA_max > tB_min ) ): tB_min
            Else If ((tB_min< tA_min ) and (tB_max> tA_min ) ): tA_min
            Else: none
    ray into difference:
        ray hits at first time in B not in A.
        example:
            If ((tB_min < tA_min ): tB_min
            Else if (tA_max < tB_max ): tA_max
            Else: none
    ray into other difference:
        ray hits at first time in A not in B.
        example:
            If ((tA_min < tB_min): tA_min
            Else if (tB_max < tA_max ): tB_max
            Else: none


    there is something called a span that we can think of unions and stuff as

    normals of csg intersections:
        normal of union or intersection:
            positive normal of intersected surface
        normal of difference:
            if tmin of positive object – normal of surface
            if tmax of negative object – negated normal of surface

    you could allow transformations in the tree but I'm going to ignore that for now

    To ray trace a CSG tree, the tree must be traversed in a depth-first manner starting at the terminal nodes.
        a method that seems right might be
        PostOrder traversal - visit left child, then the right child and then the parent;
        probably some recursive algorithm needed here, gee I hope there's a class I can use built in
    At the terminal nodes the intersection of the ray with each primitive.
    The list of ray segments that pass through the solid object must be passed back up the tree.
    Each list of ray segments will either contain either
        - an odd number of intersection points,
        - an even number of intersection points,
        - empty list of intersection points.
    An odd number of intersection points indicates that the viewpoint is inside the solid object.
    an even number of intersection points indicates that the viewpoint is outside the solid object.

    there are regularization issues if e.g. two cubes share a face and they are union'ed.  Let's ignore for now.

11/29/2019

    we made a basic tree class and we can traverse it
    right now it does addition and subtraction operators etc but we can make that whatever
    so what are the steps to make progress:
        the leaf nodes need to be able to have geometry primitives as their "value"
        the internal nodes need to be able to have boolean csg operations as their "value"
            we need a set of functions that are these boolean csg operations
            I don't know if they have to do anything other than be identifiable by the ray traverse routine
        okay let's work toward this so we can populate a tree with this stuff
        okay we can! yay
        I guess it would be cool if the operations could detect if they overlap or not and throw errors, TODO future
    alright now let's work toward tracing a scene with several reflective spheres in it
        do a single reflective sphere: check
        do multiple non-intersecting spheres bounce bounce bounce: check
        hmm, how to do a boolean
    the way it works now is, the Ray run method checks through all types of optics and calls the appropriate method
    e.g. reflect, refract, etc. Ultimately you'd probably want that code in the optic class but anyway.
    so we'd need
        a new optic class that can contain a tree of multiple shapes, say two spheres
        that class will implement a test_intersect method that will need to be csg aware
        in Ray.run we can detect if we're intersecting a member of that class and then do something csg aware to handle
        okay
        okay well some distracted hacking later we have a compound of two spheres that seems to maybe work
        probably a decent amount of damage
            I changed it so that normals get passed back from test_intersect, that's probably gonna break everything
            only union is implemented
            general refactoring needed

    11/30/19

        before we implement the more challenging boolean stuff, we need to clean up a bit
        right now the architecture is a bit weird because, we rely on the optic to test for intersect, but then the ray
        has to figure out how to refract or reflect etc, based on the type of optic it's hitting. and there's a lot of
        awkwardness in determining the intersection point and normal. So let's complete the switch, so that the optic
        does everything in one go, figures out intersect point, normal, and behavior, and passes it back to the ray.
        other refactor issues:
            need to move intersectDisc etc functions in shapes.py into the respective classes
            the script_tests need to be consolidated and put into the pytest framework, put this off for now
        alright, did it, so now the optic class will have most of the code that determines what it does. good good
        one frontier that we need to do is multiple intersections, same optic.  e.g., a thick piece of refracting glass.
        we have vector expressions in that 2006 pdf by Bram de Greve for the refracted ray, and we can count the
        intersection points to find if the ray is entering or leaving. not sure how to extend to compound optics, but,
        leave that for another day. Let's try to do a thick glass sphere with some index of refraction > 1.
            okay we did a thick glass refractive ball!
            it's a little ugly the way it's implemented, there is a variable shooting_from_outside gets passed around
            not sure if that will scale well to more complex stuff
            also had to add a floor of 1e-12 to the sphere intersect checks, hope that works out okay
            still need to handle: total internal reflection

    12/1/19

        i feel like the refract will crash if we give it total internal reflection conditions, let's do that
        alright that looks like a pretty fair attempt
        some notes and thoughts for the future:
            the big challenge ahead is getting the boolean combinations of primitives working.  We kind of have a union
            working but it's not that thoroughly tested. Still need intersect and difference.
            - one issue is how are we going to handle going between adjacent regions with different indices.
                - it might be good to have each ray keep memory of the index they're currently flying in, and then:
                - then combining with that, you could have the ray analyze and if it has a "leave" and "enter" intersect
                  in the same small tolerance, you could have it skip right to the "enter" intersect to have it be right
            also need to add more primitives, general fixes / cleanup

    1/17/2020

        happy new decade!
        eh, let's just try to add in intersect and difference, that way we can combine them all and see all the bugs
        okay well they're in there
        need to clean up some of the tests maybe before trying to test and get the deep bugs out
        some things that will be issues:
            how do we tell the compound shapes what surface behavior they have (reflective, refractive, etc)?
            when we union two shapes with different indices, what is the index of the intermediate space?

        right now the compounds are made out of primitive shapes and everything defaults to specular reflective
        it might better to have the compounds be made out of optics, because they already know what their behavior is
        hmmmmmmm
        right now, the Optic class, has a bunch of children (Mirror, Lens, etc) that all kind of do similar things,
          they own a list of shapes
          they take a "shape" string argument that effectively decides if its 2d or 3d, what the shape is
          in the do_intersect method they say what the surface behavior is
          they handle intersections and draw themselves
        it's a mess
        maybe the optic class should own a tree of all the shapes involved in it, instead of the list thing
        and it should police the high-level, decide on surface behavior, index overlaps, and stuff like that
        it will go to the shapes to find the intersect points, and then be able to do the behavior
        yeah
        okay so right now only the Compound class owns a tree
        okay, so all we have to do tell the compound class what wwe want the behavior to be, and that's consistent
        with our model, kind of (I doubt there is supposed to be a separate compound class at the end of the day).

        okay, well that was fun, put in an example of a spherical singlet lens, as a tree-intersect, with refract.
          sweet...
          it works but has issues
          first of all, figuring out the normal directions in snell's law, need to solve that, right now I just flipped
          the signs to make it work.
          next of all, the method of keeping track of whether we're inside by counting number of intersections, seems
          to have issues with the non-counting of zero-grazing-intersects.
          See the TODO's for these issues

          



























