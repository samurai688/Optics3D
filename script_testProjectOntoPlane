# -*- coding: utf-8 -*-

"""
Created on Sat Dec  8 23:47:35 2018

@author: samuel
"""

import numpy as np
from optics3d import Mirror, project_onto_plane
from general import set_axes_equal
import matplotlib.pyplot as plt
plt.close("all")

mir_center = np.array([0, 0, 0])
mir_normal = np.array([0.5, 1, 0.5])
mir_tangent = np.array([1, -1, 1])

mirror1 = Mirror(mir_center, mir_normal, shape="rectangular_flat", tangent=mir_tangent, h=1, w=1)
Optic_list = []
Optic_list.append(mirror1)

vector_point = np.array([0, 0, 0])
vector_extent = np.array([1, 0, 1])
X = vector_point[0]
Y = vector_point[1]
Z = vector_point[2]
U = vector_extent[0]
V = vector_extent[1]
W = vector_extent[2]

proj_point = np.array([0, 0, 0])
proj_extent = project_onto_plane(vector_extent, mir_normal)
Xp = proj_point[0]
Yp = proj_point[1]
Zp = proj_point[2]
Up = proj_extent[0]
Vp = proj_extent[1]
Wp = proj_extent[2]

diff_point = proj_extent
diff_extent = vector_extent - proj_extent
Xd = diff_point[0]
Yd = diff_point[1]
Zd = diff_point[2]
Ud = diff_extent[0]
Vd = diff_extent[1]
Wd = diff_extent[2]

# 3d plots
fig = plt.figure()
ax = plt.axes(projection='3d')
ax.set_aspect('equal')
for optic in Optic_list:
    optic.draw(ax, view="3d")
ax.quiver(X, Y, Z, U, V, W, color="black")
ax.quiver(Xp, Yp, Zp, Up, Vp, Wp, color="blue")
ax.quiver(Xd, Yd, Zd, Ud, Vd, Wd, color="red")


print(proj_extent)
# diff vector should be parallel to the plane norm
# cross product of two vectors is zero if they're parallel
print(np.cross(diff_extent, mir_normal))



xlim = [-1, 1]
ylim = [-1, 1]
zlim = [-1, 1]
# Comment or uncomment following both lines to test the fake bounding box:
for xb, yb, zb in zip(xlim, ylim, zlim):
    ax.plot([xb], [yb], [zb], 'w')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
set_axes_equal(ax)
plt.show()
